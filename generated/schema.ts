// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Action extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Action entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Action must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Action", id.toString(), this);
    }
  }

  static load(id: string): Action | null {
    return changetype<Action | null>(store.get("Action", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    return value!.toBigInt();
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }

  get direction(): BigInt {
    let value = this.get("direction");
    return value!.toBigInt();
  }

  set direction(value: BigInt) {
    this.set("direction", Value.fromBigInt(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    return value!.toBytes();
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }
}

export class Scoreboard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Scoreboard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Scoreboard must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Scoreboard", id.toString(), this);
    }
  }

  static load(id: string): Scoreboard | null {
    return changetype<Scoreboard | null>(store.get("Scoreboard", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get scores(): Array<string> {
    let value = this.get("scores");
    return value!.toStringArray();
  }

  set scores(value: Array<string>) {
    this.set("scores", Value.fromStringArray(value));
  }

  get totalScore(): BigInt {
    let value = this.get("totalScore");
    return value!.toBigInt();
  }

  set totalScore(value: BigInt) {
    this.set("totalScore", Value.fromBigInt(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    return value!.toBytes();
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }
}

export class Score extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Score entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Score must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Score", id.toString(), this);
    }
  }

  static load(id: string): Score | null {
    return changetype<Score | null>(store.get("Score", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get scoreType(): string {
    let value = this.get("scoreType");
    return value!.toString();
  }

  set scoreType(value: string) {
    this.set("scoreType", Value.fromString(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    return value!.toBigInt();
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }

  get scoreboard(): string {
    let value = this.get("scoreboard");
    return value!.toString();
  }

  set scoreboard(value: string) {
    this.set("scoreboard", Value.fromString(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    return value!.toBytes();
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }
}

export class ScoreUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScoreUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ScoreUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScoreUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ScoreUpdate | null {
    return changetype<ScoreUpdate | null>(
      store.get("ScoreUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get scoreType(): string {
    let value = this.get("scoreType");
    return value!.toString();
  }

  set scoreType(value: string) {
    this.set("scoreType", Value.fromString(value));
  }

  get pointChange(): BigInt {
    let value = this.get("pointChange");
    return value!.toBigInt();
  }

  set pointChange(value: BigInt) {
    this.set("pointChange", Value.fromBigInt(value));
  }

  get direction(): BigInt {
    let value = this.get("direction");
    return value!.toBigInt();
  }

  set direction(value: BigInt) {
    this.set("direction", Value.fromBigInt(value));
  }

  get actionName(): string {
    let value = this.get("actionName");
    return value!.toString();
  }

  set actionName(value: string) {
    this.set("actionName", Value.fromString(value));
  }

  get scoreboard(): string {
    let value = this.get("scoreboard");
    return value!.toString();
  }

  set scoreboard(value: string) {
    this.set("scoreboard", Value.fromString(value));
  }

  get project(): Bytes {
    let value = this.get("project");
    return value!.toBytes();
  }

  set project(value: Bytes) {
    this.set("project", Value.fromBytes(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Project extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Project entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Project must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Project", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Project | null {
    return changetype<Project | null>(store.get("Project", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owners(): Array<string> | null {
    let value = this.get("owners");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string> | null) {
    if (!value) {
      this.unset("owners");
    } else {
      this.set("owners", Value.fromStringArray(<Array<string>>value));
    }
  }

  get updaters(): Array<string> | null {
    let value = this.get("updaters");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set updaters(value: Array<string> | null) {
    if (!value) {
      this.unset("updaters");
    } else {
      this.set("updaters", Value.fromStringArray(<Array<string>>value));
    }
  }

  get actions(): Array<string> {
    let value = this.get("actions");
    return value!.toStringArray();
  }

  set actions(value: Array<string>) {
    this.set("actions", Value.fromStringArray(value));
  }

  get scoreboards(): Array<string> {
    let value = this.get("scoreboards");
    return value!.toStringArray();
  }

  set scoreboards(value: Array<string>) {
    this.set("scoreboards", Value.fromStringArray(value));
  }

  get scoreTypes(): Array<string> | null {
    let value = this.get("scoreTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set scoreTypes(value: Array<string> | null) {
    if (!value) {
      this.unset("scoreTypes");
    } else {
      this.set("scoreTypes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get projectTotalScore(): BigInt {
    let value = this.get("projectTotalScore");
    return value!.toBigInt();
  }

  set projectTotalScore(value: BigInt) {
    this.set("projectTotalScore", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }
}
